1.Вілігурський Артур
07.04.2019
-----NextCloud-------
В студента є лише дві діаграми(Use Case та Class). Зрозуміло, що вони не можуть в повному обсязі відобразити роботу NextCloud.
Глосарій відсутній(одного коментаря, що має студент явно недостатньо), що затрудняє розуміння створених діаграм та термінів, що в 
них використовуються в цілому. Незважаючи на невелику кількість діаграм, тим не менш є поняття, що потребують уточнення.
Тепер детальніше по діаграмах.
-Class Diagram
На Class Diagram є лише 4 класи(File,Folder,INode та User).
1) Не зовсім коректною є назва класу ShareLink, бо ShareLink є дією, а такі назви не прийнято давати класам.
2) Не ясно, User є авторизованим,неавторизованим користувачем чи адміном.
Всі ці різновиди користувача є на Use Case Diagram.
3) На ClassDiagram навіть не відображені всі можливості з Use Case: Install Plugin, Add new User, Upload File, Download shared file...
4) Наявних класів на Class Diagram явно недостатньо
Таким чином по наявних діаграмах важко зрозуміти принцип роботи NextCloud, навіть враховуючи те, що темою моєї роботи був DropBox.
Діаграми не відображають навіть в мінімальному обсязі принцип роботи NextCloud.
Студент ще має розширити наявну Class Diagram, додати Activity,Component,Sequence як мінімум. ...

2. Lipsky Danial
07.07.2019
------Instagram------
В студента є 10/14 типів UML діаграм. Глосарій з описом певних термінів також наявний.
Всі діаграми описуються з точки зору користувача, а не серверної частини. Але це не недолік, оскільки умову лабораторної можна трактувати
по-різному.
Тепер детальніше по діаграмах.
-Use Case Diagram
1) Відображено більшість з можливостей, що надається користувачеві(guest, registered user чи user with business acount).
2) Не зовсім зрозуміло, чому check comments розширяє(extend) See photo use case. 
3) Було б непогано додати опис(можливості, що включені) невеличкими коментарями до обширних Use Case(Search Content, Check User profile,
Check a chatting box)
4) Також зв'язок include від "Check a news feed" до "Check a chatting box" не зовсім є коректним. Логічніше було б розділити їх на два окремі.
Тобто це дві незалежні події. Користувач може надсилати повідомлення після перегляду профіля іншого користувача, а не стрічки новин.

В цілому за допомогою такої Use Case діаграми можна зрозуміти, який інтерфейс матиме користувач того чи іншого типу.
-Activity Diagrams
1) Окрім глосарію, на Activity Diagrams присутні коментарі, що сприяє їх розумінню.
2) В Activity Diagrams відображено важливі типи use cases з Use Case Diagram.

-Communication Diagram
1) В прямокутниках зображаються об'єкти класів чи самі класи, але ніяк не методи. Тобто неправильно використана нотація.
Методи пишуться над стрілками, якими передаються повідомлення.
2) Також вважаю, що треба було б більш детально зобразити взаємодію між класами в communication diagram.
Студент сказав, що виправить. Можливо, на момент вашого читання вже буде виправлено.

-Class Diagram
1) Я б змінив взаємозв'язки між класами, побудував би інакшу архітектуру, але...
Студент сказав, що констультувався з вами з приводу Class Diagram. Також ви вже перевіряли роботу, коли Class Diagram вже була,
тому вважаю свої зауваження недоречними.

-Package Diagram
1) Назва "Add Content" для package не зовсім є правильною. Адже це схоже на метод, а у випадку package краще було б назвати
"Content handler" чи щось в такому роді.
Безумовно є, що додати, в Package diagram, але враховуючи структуру Class Diagram та напрямок на користувацьку сторону
сервісу Instagram, можна зарахувати.
Тобто вигляд тієї чи іншої діаграми залежить від рівня абстракції, на якому ми її описуємо і які саме аспекти ми описуємо.

-Statechart Diagram
1) Зауважень немає
2) Зрозуміло відображено один зі сценаріїв Post new Video

-Object Diagram
1) Відповідає архітектурі в Class Diagram
2) Створені об'єкти відповідних класів та показані зв'язки між ними.

-Deployment Diagram
Зауважень немає

-Sequence Diagram
1) Використання класу API, що не був присутній в Class diagram є трохи незрозумілим.
2) На мою, думку послідовність посилки повідомлень для кожного зі сценаріїв наявних в Sequnce Diagram можна зобразити більш
детально. На жаль, не більше двох посилок повідомлень для будь-якого зі сценаріїв.
3) На зображеній діаграмі всі запити від Guess,Registered User, User with business acount обробляє Device, що в свою чергу
посилає запит до API. На рівні користувача такої взаємодії може й достатньо, але було б доцільно зобразити більш детально,
які дії виконує Device при обробці кожного з запитів - відповідно розширити sequence diagram на декілька.
Але для цього треба було б розібратися з серверною частиною Інстаграма.

-Composite Structure Diagram
Ціллю використання даного типу діаграми є більш детально описати певні моменти, класи, взаємозв'язки з Class Diagram. На мою думку,
цього не можна сказати про наявну діаграму.
Студент зобразив на Composite Structure Diagram клас User Profile, що безумовно потребує більш детального опису, але цього опису там
немає. Тобто після перегляду CS(Composite Structure) diagram не стає зрозумілим внутрішня структура класу User Profile.
Там фігурують такі об'єкти як UserID, FacebookID,FullName..., що мають зв'язок до Description. Наскільки я розумію,
Description містить всі ці об'єкти, поля. Тоді для чого в класі User Profile зберігати як Description, так і 
UserID, FacebookID, FullName....
Також немає типів атрибутів в класі User Profile, що є також недоліком.
Також структура User Profile, представлена на CS diagram не відповідає наявній в Class Diagram.
Таким чином Composite Structure Diagram потребує значних змін.